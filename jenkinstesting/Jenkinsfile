pipeline {
    agent { label 'windows' }

    environment {
        DEPLOY_DIR = "P:/Jenkinss"  // Still defined, but unused
    }

    stages {
        stage('Prepare Deploy Folder') {
            steps {
                bat 'if not exist P:\\Jenkinss mkdir P:\\Jenkinss'
                echo "Deploy folder prepared"
            }
        }

        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/rajuneduri/jenkins.git'
                echo "Successfully pulled the code"
            }
        }

        stage('Build with Maven') {
            steps {
                dir('jenkinstesting') {
                    bat 'mvn clean install'
                }
                echo "Successfully created JAR"
            }
        }

stage('Open Command Prompt in Target Folder') {
    steps {
        script {
            // Path to the target directory
            def targetPath = "${env.WORKSPACE}\\jenkinstesting\\target"

            // Echo to confirm the path
            echo "Opening command prompt in: ${targetPath}"

            // Start a new command prompt window and CD to target directory
            bat "start cmd /k \"cd /d ${targetPath}\""
        }
    }
}

        stage('Run Application') {
            steps {
                script {
                    def jarFile = bat(
                        script: 'for /f %%i in (\'dir /b jenkinstesting\\target\\*.jar\') do @echo %%i',
                        returnStdout: true
                    ).trim()
echo "Found JAR file: ${jarFile}"
                    echo "Running ${jarFile} from workspace"

                      def jarPath = "jenkinstesting\\target\\${jarFile}"
                                echo "Running application using JAR: ${jarPath}"

                    // Properly run the jar
                    bat "start \"SpringApp\" cmd /c \"java -jar ${jarPath}\""
                }
            }
        }



    }

    post {
        success {
            echo 'Build and Deployment Successful!'
        }
        failure {
            echo 'Pipeline Failed!'
        }
    }
}
