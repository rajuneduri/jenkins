pipeline {
    agent { label 'windows' }

    environment {
        DEPLOY_DIR = "P:/Jenkinss"
    }

    stages {
        stage('Prepare Deploy Folder') {
            steps {
                bat 'if not exist P:\\Jenkinss mkdir P:\\Jenkinss'
                echo "Deploy folder prepared"
            }
        }

        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/rajuneduri/jenkins.git'
                echo "Successfully pulled the code"
            }
        }

        stage('Build with Maven') {
            steps {
                dir('jenkinstesting') {
                    bat 'mvn clean install'
                }
                echo "Successfully created JAR"
            }
        }

        stage('Run Application in Background') {
            steps {
                script {
                    def jarPath = "${env.WORKSPACE}\\jenkinstesting\\target\\jenkinstesting-0.0.1-SNAPSHOT.jar"

                    echo "Running application from: ${jarPath}"

                    bat "start /b java -jar \"${jarPath}\""
                }
            }
        }
    }

    post {
        success {
            echo 'Build and Deployment Successful!'
            echo 'Email Trigger'
            script {
                sendGitEmail('SUCCESS')
            }
        }
        failure {
            echo 'Pipeline Failed!'
            script {
                sendGitEmail('FAILURE')
            }
        }
    }
}

// Function MUST be outside the pipeline block
def sendGitEmail(String status) {
    def commitAuthor = ''
    def commitHash = ''
    def commitMessage = ''
    def changedFiles = ''
    def triggeredBy = currentBuild.getBuildCauses()?.getAt(0)?.userName ?: 'Auto/Webhook'

    dir('jenkinstesting') {
        commitAuthor = bat(script: 'git log -1 --pretty=format:"%an <%ae>"', returnStdout: true).trim()
        commitHash = bat(script: 'git rev-parse --short HEAD', returnStdout: true).trim()
        commitMessage = bat(script: 'git log -1 --pretty=format:"%s"', returnStdout: true).trim()
        changedFiles = bat(script: 'git show --name-only --pretty="" HEAD', returnStdout: true).trim().replaceAll('\r\n', '<br>')
    }

    def subject = "${status}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
    def body = """
        <p><b>Build Status:</b> ${status}</p>
        <p><b>Job:</b> ${env.JOB_NAME} #${env.BUILD_NUMBER}</p>
        <p><b>Triggered By:</b> ${triggeredBy}</p>
        <p><b>Commit:</b> ${commitHash}</p>
        <p><b>Author:</b> ${commitAuthor}</p>
        <p><b>Message:</b> ${commitMessage}</p>
        <p><b>Files Changed:</b><br>${changedFiles}</p>
        <p><b>View Build:</b> <a href="${env.BUILD_URL}">${env.BUILD_URL}</a></p>
    """

    emailext (
        to: 'rajuneduri2255@gmail.com',
        subject: subject,
        body: body,
        mimeType: 'text/html'
    )
}
